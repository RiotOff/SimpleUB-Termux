from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import importlib
import sys
import time
import requests
import psutil
import platform
from datetime import timedelta
import os
from time import sleep


blacklist = []

with open("userbot.info", "r") as file:
    lines = file.readlines()
    api_id = int(lines[0].strip())
    api_hash = lines[1].strip()
    prefixes_bot = lines[2].strip()

app = Client("SimpleUB", api_id=api_id, api_hash=api_hash)
start_time = time.time()
loaded_modules = {}

MODULES_DIR = os.path.join(os.path.dirname(__file__), 'MODULES')
sys.path.append(MODULES_DIR)

def reload_modules():
    global loaded_modules
    modules_to_reload = list(loaded_modules.keys())
    loaded_modules.clear()
    for module_name in modules_to_reload:
        try:
            if module_name in sys.modules:
                module = importlib.reload(sys.modules[module_name])
            else:
                module = importlib.import_module(module_name)
            loaded_modules[module_name] = module
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_name}: {e}")

    for module in loaded_modules.values():
        for attr_name in dir(module):
            attr = getattr(module, attr_name)
            if callable(attr) and (attr_name.startswith("register_") or attr_name.startswith("command_")):
                try:
                    attr(app)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {attr_name} –∏–∑ –º–æ–¥—É–ª—è {module.__name__}: {e}")

def load_modules():
    global loaded_modules
    modules = []
    loaded_modules.clear()

    info_file_path = os.path.join(os.path.dirname(__file__), "modules.info")

    with open(info_file_path, "r") as file:
        for line in file:
            module_name = line.strip()
            if module_name:
                try:
                    if module_name in sys.modules:
                        module = importlib.reload(sys.modules[module_name])
                    else:
                        module = importlib.import_module(module_name)
                    loaded_modules[module_name] = module
                    modules.append(module)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
    return modules

def load_and_exec_modules():
    modules = load_modules()
    for module in modules:
        for attr_name in dir(module):
            attr = getattr(module, attr_name)
            if callable(attr) and (attr_name.startswith("register_") or attr_name.startswith("command_")):
                try:
                    attr(app)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {attr_name} –∏–∑ –º–æ–¥—É–ª—è {module.__name__}: {e}")


@app.on_message(filters.me & filters.command("help", prefixes="."))
async def help_command(_, message):
    prefix = "."
    help_text = "**‚öô –ú–æ–¥—É–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {}**\n\n".format(len(loaded_modules))
    for module_name, module in loaded_modules.items():
        cinfo = module.cinfo if isinstance(module.cinfo, tuple) else (module.cinfo,)
        ccomand = module.ccomand if isinstance(module.ccomand, tuple) else (module.ccomand,)
        for info, command in zip(cinfo, ccomand):
            help_text += f"{info} - {command}\n"
    await message.edit("üåï")
    sleep(1)
    help_text += (f"**\n\nüí¨ –ö–æ–º–∞–Ω–¥—ã:**\n\n"
                  f"‚Ñπ `{prefix}info` - –ò–Ω—Ñ–æ –æ —é–∑–µ—Ä–±–æ—Ç–µ.\n"
                  f"‚åõ `{prefix}ping` - –ü–∏–Ω–≥ —é–∑–µ—Ä–±–æ—Ç–∞.\n"
                  f"üí§ `{prefix}off` - –û—Ç–∫–ª—é—á–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞.\n"
                  f"üîÑ `{prefix}restart` - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏.\n"
                  f"üö´ `{prefix}addbl` / `{prefix}delbl` - –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n")
    await message.edit(help_text)

@app.on_message(filters.me & filters.command("test", prefixes="."))
async def test_command(client, message):
    keyboard = InlineKeyboardMarkup(
    [[InlineKeyboardButton("–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", url="https://telegram.org")]]
    )
    await message.reply("–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", reply_markup=keyboard)

@app.on_message(filters.me & filters.command("info", prefixes="."))
async def info_command(_, message):
    prefix = "."
    current_time = time.time()
    uptime_seconds = int(round(current_time - start_time))
    uptime = str(timedelta(seconds=uptime_seconds))
    ram = psutil.virtual_memory().percent
    system_info = platform.system()
    system_release = platform.release()
    architecture = platform.architecture()[0]

    ping_start_time = time.time()
    await message.edit("üåï")
    sleep(1)
    ping_end_time = time.time()
    ping_time = round((ping_end_time - ping_start_time) * 1000, 1)

    user = message.from_user
    username = f"@username" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º
    
    info_text = (f"**‚ú® SimpleUB**\n\n"
                 f"**üòé –í–ª–∞–¥–µ–ª–µ—Ü:** {username}\n\n"
                 f"**üí´ –í–µ—Ä—Å–∏—è:** 3.1.2.\n"
                 f"**üåü –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è**\n"
                 f"**üë• ForUsers (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)**\n\n"
                 f"**‚å®Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å:** ¬´{prefix}¬ª\n"
                 f"**‚åõ –ê–ø—Ç–∞–π–º:** {uptime}\n\n"
                 f"**‚ö°Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:** __~NaN %__\n"
                 f"**üíº –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM:** __~{ram} MB__\n"
                 f"**‚úåÔ∏è {system_info} {system_release} ({architecture})**")
    
    await message.edit(info_text)


@app.on_message(filters.me & filters.command(["off"], prefixes="."))
async def turn_off(_, message):
    await message.edit("üåï")
    sleep(1)
    await message.edit("**üí§ –û—Ç–∫–ª—é—á–∞—é —é–∑–µ—Ä–±–æ—Ç–∞...**")
    exit()


@app.on_message(filters.me & filters.command(["ping"], prefixes="."))
async def ping(_, message):
    ping_start_time = time.time()
    await message.edit("üåï")
    ping_end_time = time.time()
    ping_time = round((ping_end_time - ping_start_time) * 1000)
    uptime_seconds = int(round(time.time() - start_time))
    uptime = str(timedelta(seconds=uptime_seconds))
    await message.edit(f"**‚ö° –í–∞—à –ø–∏–Ω–≥: {ping_time} –º—Å**\n**üöÄ –ü—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {uptime}**\n\n üí° __–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ Telegram –≤ –±–æ–ª—å—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram –∏ –¥—Ä—É–≥–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —é–∑–µ—Ä–±–æ—Ç__")


@app.on_message(filters.me & filters.command(["restart"], prefixes="."))
async def restart(_, message):
    await message.edit("**–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –º–æ–¥—É–ª–∏...**")
    restart_start_time = time.time()
    reload_modules()
    restart_end_time = time.time()
    restart_time = round(restart_end_time - restart_start_time, 2)
    await message.edit(f"**‚úÖ –ú–æ–¥—É–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã. –≠—Ç–æ –∑–∞–Ω—è–ª–æ {restart_time} —Å–µ–∫—É–Ω–¥.**")


@app.on_message(filters.me & filters.command("addbl", prefixes="."))
async def add_blacklist_command(_, message):
    userid_telegram = 1234567890 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
    if message.from_user.id == userid_telegram:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            if user_id not in blacklist:
                    if user_id == userid_telegram:
                        await message.edit("üåï")
                        time.sleep(1)
                        await message.edit("‚ùå **–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.**")
                    else:
                        with open("bldb.info", "a") as file:
                            file.write(str(user_id) + "\n")
                        await message.edit("üåï")
                        time.sleep(1)
                        await message.edit("‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ SimpleUB.**")
                        blacklist.append(user_id)
            else:
                await message.edit("üåï")
                time.sleep(1)
                await message.edit("üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.**")
        else:
            await message.edit("üåï")
            time.sleep(1)
            await message.edit("üö´ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.**")
    else:
        await message.edit("üåï")
        time.sleep(1)
        await message.edit("‚ùå **–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.**")

@app.on_message(filters.me & filters.command("delbl", prefixes="."))
async def remove_blacklist_command(_, message):
    userid_telegram = 1234567890 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
    if message.from_user.id == userid_telegram:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            if user_id in blacklist:
                blacklist.remove(user_id)
                with open("bldb.info", "w") as file:
                    for id in blacklist:
                        file.write(str(id) + "\n")
                await message.edit("üåï")
                time.sleep(1)
                await message.edit("‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.**")
            else:
                await message.edit("üåï")
                time.sleep(1)
                await message.edit("üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.**")
        else:
            await message.edit("üåï")
            time.sleep(1)
            await message.edit("üö´ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.**")
    else:
        await message.edit("üåï")
        time.sleep(1)
        await message.edit("‚ùå **–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.**")


load_and_exec_modules()
print("–û—Å–Ω–æ–≤–∞ SimpleUB –∑–∞–ø—É—â–µ–Ω–∞! –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: 3.1.2.")
app.run()
